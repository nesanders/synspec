<!DOCTYPE html>
<meta charset="utf-8">
<title>Galaxy spectrum synthesizer</title>
<link href="synstyle.css" rel="stylesheet" type="text/css" media="screen"/>

<body>

<h2>Javascript galaxy spectrum synthesizer</h2>

<script src="d3.v3.min.js"></script>
<script>

function CCMextinct(l,EBmV,Rv) {
    // Calculate flux supression at a given wavelength based on the M.W. extinction law of
    // Cardelli, Clayton, and Mathis (1989ApJ...345..245C).
    /////////////////////
    // Calculate inverse microns
    var x=1/(l/1e4);
    var y=x-1.82;
    // What regime are we in?
    if (x <= 0.3) { // Assume no extinction past the far IR
      var a = 0;
      var b = 0;
    }
    if (x > 0.3 && x <= 1.1) { // Optical/NIR
      var a=0.574*Math.pow(x,1.61);
      var b=-0.527*Math.pow(x,1.61);
    }
    if (x > 1.1 && x <= 3.3) {
      var a=1+0.17699*y-0.50447*Math.pow(y,2)-0.02427*Math.pow(y,3)+0.72085*Math.pow(y,4)+0.01979*Math.pow(y,5)-0.77530*Math.pow(y,6)+0.32999*Math.pow(y,7);
      var b=1.41338*y+2.28305*Math.pow(y,2)+1.07233*Math.pow(y,3)-5.38434*Math.pow(y,4)-0.62251*Math.pow(y,5)+5.30260*Math.pow(y,6)-2.09002*Math.pow(y,7);
    }
    
    var Fa=-0.04473*Math.pow((x-5.9),2)-0.009779*Math.pow((x-5.9),3);
    var Fb=0.2130*Math.pow((x-5.9),2)+0.1207*Math.pow((x-5.9),3);
    if (x > 3.3 && x <= 8) { /// UV and FUV
      var a=1.752-0.316*x-0.104/(Math.pow((x-4.67),2)+0.341)+Fa;
      var b=-3.090+1.825*x+1.206/(Math.pow((x-4.62),2)+0.263)+Fb;
    }
    if (x > 8 && x <= 10) {
      var a=-1.073-0.628*(x-8)+0.137*Math.pow((x-8),2)-0.070*Math.pow((x-8),3);
      var b=13.670+4.257*(x-8)-0.420*Math.pow((x-8),2)+0.374*Math.pow((x-8),3);
    }
    //Calculate extinction in magnitudes
    var AV = EBmV*Rv;
    var Al = (a+b/Rv)*(AV);
    return Math.pow(10,Al/2.5);
}


// Define global variables
var margin = {top: 10, right: 10, bottom: 150, left: 40},
    margin2 = {top: 380, right: 10, bottom: 40, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom,
    height2 = 500 - margin2.top - margin2.bottom;

var x = d3.scale.linear().range([0, width]),
    x2 = d3.scale.linear().range([0, width]),
    y = d3.scale.linear().range([height, 0]),
    y2 = d3.scale.linear().range([height2, 0]);

var xAxis = d3.svg.axis().scale(x).orient("bottom"),
    xAxis2 = d3.svg.axis().scale(x2).orient("bottom"),
    yAxis = d3.svg.axis().scale(y).orient("left");

var brush = d3.svg.brush()
    .x(x2)
    .on("brush", OnBrush);

var Sdata;

//Create big line plot
var line = d3.svg.line()
    .interpolate("monotone")
    .x(function(d) { return x(d.wz); })
    .y(function(d) { return y(d.f); });

//Create little line plot
var line2 = d3.svg.line()
    .interpolate("monotone")
    .x(function(d) { return x2(d.wz); })
    .y(function(d) { return y2(d.f); });

// Create passband plots
var area_PB_u = d3.svg.area()
  .interpolate("monotone")
  .x(function(pd) { return x2(pd.w); })
  .y0(function(pd) { return y2(0); })
  .y1(function(pd) { return y2(pd.f); });
var area_PB_b = d3.svg.area()
  .interpolate("monotone")
  .x(function(pd) { return x2(pd.w); })
  .y0(function(pd) { return y2(0); })
  .y1(function(pd) { return y2(pd.f); });
var area_PB_v = d3.svg.area()
  .interpolate("monotone")
  .x(function(pd) { return x2(pd.w); })
  .y0(function(pd) { return y2(0); })
  .y1(function(pd) { return y2(pd.f); });
var area_PB_r = d3.svg.area()
  .interpolate("monotone")
  .x(function(pd) { return x2(pd.w); })
  .y0(function(pd) { return y2(0); })
  .y1(function(pd) { return y2(pd.f); });
var area_PB_i = d3.svg.area()
  .interpolate("monotone")
  .x(function(pd) { return x2(pd.w); })
  .y0(function(pd) { return y2(0); })
  .y1(function(pd) { return y2(pd.f); });


//SVG canvas for whole page
var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom);

//Clip things that go off the reservation
svg.append("defs").append("clipPath")
    .attr("id", "clip")
  .append("rect")
    .attr("width", width)
    .attr("height", height);

// Set up the big plot
var focus = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// Set up the little plot
var context = svg.append("g")
    .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

d3.tsv("NES_pickles.tsv", function(error, data) {
  data.forEach(function(d) {
    d.w = +d.w;
    d.wz = +d.w*(1+0);
    d.biii = +d.biii;
    d.aiii = +d.aiii;
    d.fiii = +d.fiii;
    d.giii = +d.giii;
    d.kiii = +d.kiii;
    d.miii = +d.miii;
    d.bv = +d.bv;
    d.av = +d.av;
    d.fv = +d.fv;
    d.gv = +d.gv;
    d.kv = +d.kv;
    d.mv = +d.mv;
    //silly synthetic spectrum
    d.f = (d.bv + d.av + d.fv + d.gv + d.kv + d.mv)/6.;
    // Load each stellar class spectrum with a loop
//     fkeys = d3.keys(data[0]).filter(function(key) { return key !== "w"; });
  });

// Save data to global variable for later use
  Sdata=data;

//   Set plot dimensions
  x.domain(d3.extent(data.map(function(d) { return d.w; })));
  y.domain([0, d3.max(data.map(function(d) { return d.f; }))]);
  x2.domain(x.domain());
  y2.domain(y.domain());

// Draw line - big plot
  cline = focus.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("clip-path", "url(#clip)")
      .attr("d", line);

//   Setup x axis - big plot
  focus.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

//   Setup y axis - big plot
  focus.append("g")
      .attr("class", "y axis")
      .call(yAxis)
      .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", -35)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Flux");

  // Draw line - little plot
  cline2 = context.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", line2);

  //   Setup x axis - little plot
  context.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height2 + ")")
      .call(xAxis2)
      // Draw ticks
      .append("text")
      // Label placement
      .attr("x", 200)
      .attr("y", 30)
      .attr("dx", ".71em")
      .style("text-anchor", "end")
      .text("Observed wavelength (Angstroms)");


  //////////////////////////
  // Load passband data
  //////////////////////////
  d3.tsv("passbands/bess-u.pass", function(error, pdata) {
    pdata.forEach(function(pd) {
      pd.w=+pd.w;
      pd.f=+pd.f;
    });
    // draw passband
    context.append("path")
	  .datum(pdata)
	  .attr("d", area_PB_u)
	  .style("fill","rgb(0,0,250)")
	  .style("opacity","0.5")
	  .attr("class","pbu");
    context.append("text")
	  .attr("class","pblabels")
	  .attr("transform", "translate(" + x2(pdata[10].w) + ","+ y2(0.3) +")")
	  .text('U');
  });
  d3.tsv("passbands/bess-b.pass", function(error, pdata) {
    pdata.forEach(function(pd) {
      pd.w=+pd.w;
      pd.f=+pd.f;
    });
    // draw passband
    context.append("path")
	  .datum(pdata)
	  .attr("d", area_PB_b)
	  .style("fill","rgb(0,0,150)")
	  .style("opacity","0.5")
	  .attr("class","pbb");
    context.append("text")
	  .attr("class","pblabels")
	  .attr("transform", "translate(" + x2(pdata[5].w) + ","+ y2(0.3) +")")
	  .text('B');
  });
  d3.tsv("passbands/bess-v.pass", function(error, pdata) {
    pdata.forEach(function(pd) {
      pd.w=+pd.w;
      pd.f=+pd.f;
    });
    // draw passband
    context.append("path")
	  .datum(pdata)
	  .attr("d", area_PB_v)
	  .style("fill","rgb(150,150,0)")
	  .style("opacity","0.5")
	  .attr("class","pbv");
    context.append("text")
	  .attr("class","pblabels")
	  .attr("transform", "translate(" + x2(pdata[5].w) + ","+ y2(0.3) +")")
	  .text('V');
  });
  d3.tsv("passbands/bess-r.pass", function(error, pdata) {
    pdata.forEach(function(pd) {
      pd.w=+pd.w;
      pd.f=+pd.f;
    });
    // draw passband
    context.append("path")
	  .datum(pdata)
	  .attr("d", area_PB_r)
	  .style("fill","rgb(250,0,0)")
	  .style("opacity","0.5")
	  .attr("class","pbr");
    context.append("text")
	  .attr("class","pblabels")
	  .attr("transform", "translate(" + x2(pdata[10].w) + ","+ y2(0.3) +")")
	  .text('R');
  });
  d3.tsv("passbands/bess-i.pass", function(error, pdata) {
    pdata.forEach(function(pd) {
      pd.w=+pd.w;
      pd.f=+pd.f;
    });
    // draw passband
    context.append("path")
	  .datum(pdata)
	  .attr("d", area_PB_i)
	  .style("fill","rgb(100,0,0)")
	  .style("opacity","0.5")
	  .attr("class","pbi");
    context.append("text")
	  .attr("class","pblabels")
	  .attr("transform", "translate(" + x2(pdata[10].w) + ","+ y2(0.3) +")")
	  .text('I');
  });



  //   Setup little plot brush rectangle
  context.append("g")
      .attr("class", "x brush")
      .call(OnBrush)
    .selectAll("rect")
      .attr("y", -6) 
      .attr("height", height2 + 7)
      .attr("width", width + 7);

});

function OnBrush() {
  x.domain(brush.empty() ? x2.domain() : brush.extent());
  focus.select("path").attr("d", line);
  focus.select(".x.axis").call(xAxis);
}


function update() {
  // Get user data
  var redshift = parseFloat(document.getElementById('TBredshift').value);   
  var extinction = parseFloat(document.getElementById('TBextinction').value);
  var sB = parseFloat(document.getElementById('TBsB').value);
  var sA = parseFloat(document.getElementById('TBsA').value);
  var sF = parseFloat(document.getElementById('TBsF').value);
  var sG = parseFloat(document.getElementById('TBsG').value);
  var sK = parseFloat(document.getElementById('TBsK').value);
  var sM = parseFloat(document.getElementById('TBsM').value);
  
  // Computer new stellar composite
  function updateW(el, ind, ar) {
    ar[ind].wz = ar[ind].w*(1.+redshift);
  }
  function updateF(el, ind, ar) {
    ar[ind].f = 1/(CCMextinct(ar[ind].wz,extinction/3.1,3.1))
	*(ar[ind].bv*sB + ar[ind].av*sA + ar[ind].fv*sF + ar[ind].gv*sG + ar[ind].kv*sK + ar[ind].mv*sM)
	/(sB+sA+sF+sG+sK+sM);
    console.log(1/(CCMextinct(ar[ind].wz,extinction/3.1,3.1)));
  }
  
  Sdata.forEach(updateW);
  Sdata.forEach(updateF);
  
  context.selectAll("path")
    .data([Sdata])
    .attr("d",line2)
    .transition()
    .duration(2000);
    
  focus.selectAll("path")
    .data([Sdata])
    .attr("d",line)
    .transition()
    .duration(2000);
    
    //   Set plot dimensions
  x.domain(d3.extent(Sdata.map(function(d) { return d.w; })));
  y.domain([0, d3.max(Sdata.map(function(d) { return d.f; }))]);
  x2.domain(x.domain());
  y2.domain(y.domain());
  /*
  // Select all nodes
  node = svg.selectAll(".node")
    .data(Sdata, String);
  
  // update lines
    node.each(function(d, i) {
        single = d3.select(this)
        single.selectAll("line")
            .transition()
            .attr("width", scale)
            .attr("x", d.w*(1+redshift))
            .attr("y", d.f*CCMextinct(d.w,extinction/3.1,3.1))
            .duration(300);
    })
  */
/*
  cline.datum(Sdata);
  cline2.datum(Sdata);

  // Update galaxy spectra using animation (transitions)
  var objs = d3.select("body").transition();

  objs.select(".line")
    .attr("x",function(d) { return x(d.w*(1+redshift)); })
    .attr("y",function(d) { return y(d.f)*CCMextinct(d.w,extinction/3.1,3.1); });*/

//   objs.select(".line2")
//     .attr("x",function(d) { return x(d.w*(1+redshift)); })
//     .attr("y",function(d) { return y(d.f)*CCMextinct(d.w,extinction/3.1,3.1); });
}


</script>







<h2>Galaxy parameters</h2>

<h3>Intrinsic</h3>
<form method="post" action="">
<p>Stellar constituents:  <small>(Total population will be normalized)</small></p>
B<textarea id="TBsB" cols="3" rows="1">1</textarea>
A<textarea id="TBsA" cols="3" rows="1">1</textarea>
F<textarea id="TBsF" cols="3" rows="1">1</textarea>
G<textarea id="TBsG" cols="3" rows="1">1</textarea>
K<textarea id="TBsK" cols="3" rows="1">1</textarea>
M<textarea id="TBsM" cols="3" rows="1">1</textarea>


<h3>Extrinsic</h3>

Redshift 
<textarea id="TBredshift" cols="10" rows="1">0.0001</textarea>
<!-- <input type="submit" value="Update" /> -->

<br>
Extinction (A<sub>V</sub> (mag); R<sub>V</sub>=3.1) 
<textarea id="TBextinction" cols="10" rows="1">0.0</textarea>
<!-- <input type="submit" value="Update" /> -->
</form>

<button onclick="update()">Update</button>

</body>

